// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order.proto

/*
	Package orderData is a generated protocol buffer package.

	It is generated from these files:
		order.proto

	It has these top-level messages:
		RegisterClientReq
		RegisterClientResp
		SendDataReq
		SendDataResp
		DataArrivedReq
		DataArrivedResp
		ItemAgentSendDataReq
		ItemAgentSendDataResp
		ItemAgentArrivedReq
		ItemAgentArrivedResp
*/
package orderData

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 向服务端注册客户端
type RegisterClientReq struct {
	ClientName string `protobuf:"bytes,1,opt,name=ClientName,proto3" json:"ClientName,omitempty"`
	GroupName  string `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (m *RegisterClientReq) Reset()                    { *m = RegisterClientReq{} }
func (m *RegisterClientReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterClientReq) ProtoMessage()               {}
func (*RegisterClientReq) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{0} }

func (m *RegisterClientReq) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *RegisterClientReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

// 注册客户端回复
type RegisterClientResp struct {
	ErrorId string `protobuf:"bytes,1,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`
}

func (m *RegisterClientResp) Reset()                    { *m = RegisterClientResp{} }
func (m *RegisterClientResp) String() string            { return proto.CompactTextString(m) }
func (*RegisterClientResp) ProtoMessage()               {}
func (*RegisterClientResp) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{1} }

func (m *RegisterClientResp) GetErrorId() string {
	if m != nil {
		return m.ErrorId
	}
	return ""
}

// 客户端发送订单数据
type SendDataReq struct {
	Target     string `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	CustomId   string `protobuf:"bytes,2,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
	SequenceId uint64 `protobuf:"varint,3,opt,name=SequenceId,proto3" json:"SequenceId,omitempty"`
	Data       string `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *SendDataReq) Reset()                    { *m = SendDataReq{} }
func (m *SendDataReq) String() string            { return proto.CompactTextString(m) }
func (*SendDataReq) ProtoMessage()               {}
func (*SendDataReq) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{2} }

func (m *SendDataReq) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *SendDataReq) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *SendDataReq) GetSequenceId() uint64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *SendDataReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 客户端收到订单数据确认
type SendDataResp struct {
	ErrorId  string `protobuf:"bytes,1,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`
	CustomId string `protobuf:"bytes,2,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
}

func (m *SendDataResp) Reset()                    { *m = SendDataResp{} }
func (m *SendDataResp) String() string            { return proto.CompactTextString(m) }
func (*SendDataResp) ProtoMessage()               {}
func (*SendDataResp) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{3} }

func (m *SendDataResp) GetErrorId() string {
	if m != nil {
		return m.ErrorId
	}
	return ""
}

func (m *SendDataResp) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

// 服务器通知客户端数据到达
type DataArrivedReq struct {
	CustomId   string `protobuf:"bytes,1,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
	SequenceId uint64 `protobuf:"varint,2,opt,name=SequenceId,proto3" json:"SequenceId,omitempty"`
	Data       string `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *DataArrivedReq) Reset()                    { *m = DataArrivedReq{} }
func (m *DataArrivedReq) String() string            { return proto.CompactTextString(m) }
func (*DataArrivedReq) ProtoMessage()               {}
func (*DataArrivedReq) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{4} }

func (m *DataArrivedReq) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *DataArrivedReq) GetSequenceId() uint64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *DataArrivedReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 服务器收到通知数据到达确认
type DataArrivedResp struct {
	ErrorId  string `protobuf:"bytes,1,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`
	CustomId string `protobuf:"bytes,2,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
}

func (m *DataArrivedResp) Reset()                    { *m = DataArrivedResp{} }
func (m *DataArrivedResp) String() string            { return proto.CompactTextString(m) }
func (*DataArrivedResp) ProtoMessage()               {}
func (*DataArrivedResp) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{5} }

func (m *DataArrivedResp) GetErrorId() string {
	if m != nil {
		return m.ErrorId
	}
	return ""
}

func (m *DataArrivedResp) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

// ------------------------------------------------------------------------------
// 服务器消息
// itemAgent收到消息后向connProcess发送数据请求
type ItemAgentSendDataReq struct {
	CustomId   string `protobuf:"bytes,1,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
	Target     string `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	Origin     string `protobuf:"bytes,3,opt,name=Origin,proto3" json:"Origin,omitempty"`
	SequenceId uint64 `protobuf:"varint,4,opt,name=SequenceId,proto3" json:"SequenceId,omitempty"`
	Data       string `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ItemAgentSendDataReq) Reset()                    { *m = ItemAgentSendDataReq{} }
func (m *ItemAgentSendDataReq) String() string            { return proto.CompactTextString(m) }
func (*ItemAgentSendDataReq) ProtoMessage()               {}
func (*ItemAgentSendDataReq) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{6} }

func (m *ItemAgentSendDataReq) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *ItemAgentSendDataReq) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ItemAgentSendDataReq) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *ItemAgentSendDataReq) GetSequenceId() uint64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *ItemAgentSendDataReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 返回结果
type ItemAgentSendDataResp struct {
	CustomId string `protobuf:"bytes,1,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
	ErrorId  string `protobuf:"bytes,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`
}

func (m *ItemAgentSendDataResp) Reset()                    { *m = ItemAgentSendDataResp{} }
func (m *ItemAgentSendDataResp) String() string            { return proto.CompactTextString(m) }
func (*ItemAgentSendDataResp) ProtoMessage()               {}
func (*ItemAgentSendDataResp) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{7} }

func (m *ItemAgentSendDataResp) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *ItemAgentSendDataResp) GetErrorId() string {
	if m != nil {
		return m.ErrorId
	}
	return ""
}

// connProcess向目标itemAgent发送请求
type ItemAgentArrivedReq struct {
	CustomId   string `protobuf:"bytes,1,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
	Origin     string `protobuf:"bytes,2,opt,name=Origin,proto3" json:"Origin,omitempty"`
	SequenceId uint64 `protobuf:"varint,3,opt,name=SequenceId,proto3" json:"SequenceId,omitempty"`
	Data       string `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ItemAgentArrivedReq) Reset()                    { *m = ItemAgentArrivedReq{} }
func (m *ItemAgentArrivedReq) String() string            { return proto.CompactTextString(m) }
func (*ItemAgentArrivedReq) ProtoMessage()               {}
func (*ItemAgentArrivedReq) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{8} }

func (m *ItemAgentArrivedReq) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *ItemAgentArrivedReq) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *ItemAgentArrivedReq) GetSequenceId() uint64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *ItemAgentArrivedReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 发送成功后返回
type ItemAgentArrivedResp struct {
	CustomId string `protobuf:"bytes,1,opt,name=CustomId,proto3" json:"CustomId,omitempty"`
	ErrorId  string `protobuf:"bytes,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`
}

func (m *ItemAgentArrivedResp) Reset()                    { *m = ItemAgentArrivedResp{} }
func (m *ItemAgentArrivedResp) String() string            { return proto.CompactTextString(m) }
func (*ItemAgentArrivedResp) ProtoMessage()               {}
func (*ItemAgentArrivedResp) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{9} }

func (m *ItemAgentArrivedResp) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *ItemAgentArrivedResp) GetErrorId() string {
	if m != nil {
		return m.ErrorId
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterClientReq)(nil), "orderData.RegisterClientReq")
	proto.RegisterType((*RegisterClientResp)(nil), "orderData.RegisterClientResp")
	proto.RegisterType((*SendDataReq)(nil), "orderData.SendDataReq")
	proto.RegisterType((*SendDataResp)(nil), "orderData.SendDataResp")
	proto.RegisterType((*DataArrivedReq)(nil), "orderData.DataArrivedReq")
	proto.RegisterType((*DataArrivedResp)(nil), "orderData.DataArrivedResp")
	proto.RegisterType((*ItemAgentSendDataReq)(nil), "orderData.ItemAgentSendDataReq")
	proto.RegisterType((*ItemAgentSendDataResp)(nil), "orderData.ItemAgentSendDataResp")
	proto.RegisterType((*ItemAgentArrivedReq)(nil), "orderData.ItemAgentArrivedReq")
	proto.RegisterType((*ItemAgentArrivedResp)(nil), "orderData.ItemAgentArrivedResp")
}
func (m *RegisterClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterClientReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ClientName)))
		i += copy(dAtA[i:], m.ClientName)
	}
	if len(m.GroupName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	return i, nil
}

func (m *RegisterClientResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterClientResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ErrorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ErrorId)))
		i += copy(dAtA[i:], m.ErrorId)
	}
	return i, nil
}

func (m *SendDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendDataReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.CustomId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	if m.SequenceId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.SequenceId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *SendDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendDataResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ErrorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ErrorId)))
		i += copy(dAtA[i:], m.ErrorId)
	}
	if len(m.CustomId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	return i, nil
}

func (m *DataArrivedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataArrivedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	if m.SequenceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.SequenceId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DataArrivedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataArrivedResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ErrorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ErrorId)))
		i += copy(dAtA[i:], m.ErrorId)
	}
	if len(m.CustomId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	return i, nil
}

func (m *ItemAgentSendDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemAgentSendDataReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	if m.SequenceId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.SequenceId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ItemAgentSendDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemAgentSendDataResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	if len(m.ErrorId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ErrorId)))
		i += copy(dAtA[i:], m.ErrorId)
	}
	return i, nil
}

func (m *ItemAgentArrivedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemAgentArrivedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	if m.SequenceId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.SequenceId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ItemAgentArrivedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemAgentArrivedResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CustomId)))
		i += copy(dAtA[i:], m.CustomId)
	}
	if len(m.ErrorId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ErrorId)))
		i += copy(dAtA[i:], m.ErrorId)
	}
	return i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterClientReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientName)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *RegisterClientResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.ErrorId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *SendDataReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.SequenceId != 0 {
		n += 1 + sovOrder(uint64(m.SequenceId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *SendDataResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.ErrorId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *DataArrivedReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.SequenceId != 0 {
		n += 1 + sovOrder(uint64(m.SequenceId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *DataArrivedResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.ErrorId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *ItemAgentSendDataReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.SequenceId != 0 {
		n += 1 + sovOrder(uint64(m.SequenceId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *ItemAgentSendDataResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.ErrorId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *ItemAgentArrivedReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.SequenceId != 0 {
		n += 1 + sovOrder(uint64(m.SequenceId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *ItemAgentArrivedResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.ErrorId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterClientResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterClientResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterClientResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataArrivedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataArrivedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataArrivedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataArrivedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataArrivedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataArrivedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemAgentSendDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemAgentSendDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemAgentSendDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemAgentSendDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemAgentSendDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemAgentSendDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemAgentArrivedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemAgentArrivedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemAgentArrivedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemAgentArrivedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemAgentArrivedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemAgentArrivedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("order.proto", fileDescriptorOrder) }

var fileDescriptorOrder = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xdd, 0x4e, 0xfa, 0x40,
	0x10, 0xc5, 0xff, 0x5b, 0xfa, 0x47, 0x19, 0x8c, 0x1f, 0xab, 0x92, 0xc6, 0x98, 0x86, 0xf4, 0x8a,
	0x2b, 0x6e, 0x7c, 0x02, 0x04, 0x43, 0x9a, 0xf8, 0x11, 0x8b, 0x0f, 0x60, 0xb5, 0x93, 0xa6, 0x89,
	0xb4, 0x65, 0xba, 0xf5, 0xce, 0xd7, 0x30, 0x3e, 0x92, 0x97, 0x3e, 0x82, 0xc1, 0x17, 0x31, 0xad,
	0x2b, 0xdd, 0x12, 0xd9, 0x10, 0xee, 0x38, 0xb3, 0xcb, 0x9c, 0xdf, 0x99, 0xd9, 0x42, 0x3b, 0xa1,
	0x00, 0xa9, 0x9f, 0x52, 0x22, 0x12, 0xde, 0x2a, 0xc5, 0xc8, 0x17, 0xbe, 0x73, 0x0b, 0x07, 0x1e,
	0x86, 0x51, 0x26, 0x90, 0x86, 0x4f, 0x11, 0xc6, 0xc2, 0xc3, 0x19, 0xb7, 0x01, 0x7e, 0xc4, 0xb5,
	0x3f, 0x45, 0x8b, 0x75, 0x59, 0xaf, 0xe5, 0x29, 0x15, 0x7e, 0x0a, 0xad, 0x31, 0x25, 0x79, 0x5a,
	0x1e, 0x1b, 0xe5, 0x71, 0x55, 0x70, 0xfa, 0xc0, 0x97, 0x5b, 0x66, 0x29, 0xb7, 0x60, 0xeb, 0x82,
	0x28, 0x21, 0x37, 0x90, 0x0d, 0x7f, 0xa5, 0x93, 0x43, 0x7b, 0x82, 0x71, 0x50, 0xe0, 0x14, 0xe6,
	0x1d, 0x68, 0xde, 0xf9, 0x14, 0xa2, 0x90, 0xf7, 0xa4, 0xe2, 0x27, 0xb0, 0x3d, 0xcc, 0x33, 0x91,
	0x4c, 0xdd, 0x40, 0x7a, 0x2e, 0x74, 0x01, 0x3c, 0xc1, 0x59, 0x8e, 0xf1, 0x23, 0xba, 0x81, 0xd5,
	0xe8, 0xb2, 0x9e, 0xe9, 0x29, 0x15, 0xce, 0xc1, 0x2c, 0xda, 0x5b, 0x66, 0xf9, 0xbf, 0xf2, 0xb7,
	0x33, 0x82, 0x9d, 0xca, 0x56, 0x07, 0xa8, 0x73, 0x76, 0xee, 0x61, 0xb7, 0xe8, 0x30, 0x20, 0x8a,
	0x9e, 0x31, 0x28, 0xf8, 0xd5, 0xdb, 0x4c, 0xcb, 0x69, 0xac, 0xe4, 0x6c, 0x28, 0x9c, 0x63, 0xd8,
	0xab, 0x39, 0x6c, 0x8c, 0xfa, 0xca, 0xe0, 0xc8, 0x15, 0x38, 0x1d, 0x84, 0x18, 0x0b, 0x75, 0xe2,
	0x3a, 0xe2, 0x6a, 0x1b, 0x46, 0x6d, 0x1b, 0x1d, 0x68, 0xde, 0x50, 0x14, 0x46, 0xb1, 0x64, 0x95,
	0x6a, 0x29, 0xa1, 0xb9, 0x32, 0xe1, 0x7f, 0x25, 0xe1, 0x15, 0x1c, 0xff, 0xc1, 0x95, 0xa5, 0x5a,
	0x30, 0x65, 0x06, 0x46, 0xfd, 0x3d, 0xbd, 0xc0, 0xe1, 0xa2, 0xdd, 0x9a, 0x7b, 0xa9, 0xd2, 0x18,
	0x9a, 0x34, 0xeb, 0xbd, 0xab, 0x4b, 0x65, 0xca, 0xea, 0xd2, 0x36, 0x0a, 0x73, 0xbe, 0xff, 0x3e,
	0xb7, 0xd9, 0xc7, 0xdc, 0x66, 0x9f, 0x73, 0x9b, 0xbd, 0x7d, 0xd9, 0xff, 0x1e, 0x9a, 0xe5, 0x37,
	0x7c, 0xf6, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xd4, 0x13, 0x5d, 0xd2, 0x03, 0x00, 0x00,
}
